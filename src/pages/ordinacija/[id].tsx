import Table from "@/components/Table";
import MainLayout from "@/layouts/MainLayout";
import { RouterOutputs, api } from "@/utils/api";
import { createColumnHelper, getCoreRowModel } from "@tanstack/react-table";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

export default function Page() {
  const router = useRouter();
  const { id } = router.query as { id: string };

  return (
    <MainLayout>
      <main className="container flex flex-col  p-4">
        <div className="grid  grid-cols-[3fr_2fr] items-center justify-center">
          <div>
            <h2 className="text-lg font-medium text-gray-800  ">Ordinacije</h2>
            <p className="mt-1 text-sm text-gray-500  "></p>
          </div>
        </div>
        <div className="flex flex-col gap-8">
          <Layout id={id}></Layout>
        </div>
      </main>
    </MainLayout>
  );
}

type Ordinacija = Exclude<RouterOutputs["ordinacije"]["getOne"], null>;
type Osoblje = Ordinacija["osoblje"][0];
type Pregled = Ordinacija["pregledi"][0];
const columnsOsobljeHelper = createColumnHelper<Osoblje>();

const columnsOsobljeAll = [
  columnsOsobljeHelper.accessor("id", {
    header: () => "ID",
    cell: (info) => info.getValue(),
  }),
  columnsOsobljeHelper.accessor("ime", {
    header: () => "Ime i prezime",
    cell: (info) => (
      <span>
        {info.row.original.ime} {info.row.original.prezime}
      </span>
    ),
  }),
  columnsOsobljeHelper.accessor("kontakt", {
    header: () => "Kontakt",
    cell: (info) => info.getValue(),
  }),
];

function Layout({ id }: { id: string }) {
  const { data } = api.ordinacije.getOne.useQuery(id);

  if (!data) return <div>Loading...</div>;
  return (
    <>
      <Head>
        <title>Ordinacije - {id}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h2 className="mb-4 text-lg font-medium text-gray-800 ">
          Pregled Osoblja
        </h2>
        <TableOsoblje data={data.osoblje} />
      </div>
      <div>
        <h2 className="mb-4 text-lg font-medium text-gray-800  ">
          Pregled Pregleda
        </h2>
        <TablePregled data={data.pregledi} />
      </div>
    </>
  );
}

function TableOsoblje({ data }: { data: Osoblje[] }) {
  return (
    <Table
      options={{
        data,
        columns: columnsOsobljeAll,
        getCoreRowModel: getCoreRowModel(),
      }}
      tableRowClick={(row, router) => {
        void router.push(`/osoblje/${row.id}`);
      }}
    ></Table>
  );
}

const columnsPregledHelper = createColumnHelper<Pregled>();

const columnsPregledAll = [
  columnsPregledHelper.accessor("id", {
    header: () => "ID",
    cell: (info) => info.getValue(),
  }),
  columnsPregledHelper.accessor("gotov", {
    header: () => "Gotova",
    cell: (info) => (info.getValue() ? "Da" : "Ne"),
  }),
];

function TablePregled({ data }: { data: Pregled[] }) {
  return (
    <Table
      options={{
        data,
        columns: columnsPregledAll,
        getCoreRowModel: getCoreRowModel(),
      }}
      tableRowClick={(row, router) => {
        void router.push(`/poseta/${row.posetaId}`);
      }}
    ></Table>
  );
}
