import Table from "@/components/Table";
import MainLayout from "@/layouts/MainLayout";
import { RouterOutputs, api } from "@/utils/api";
import { createColumnHelper, getCoreRowModel } from "@tanstack/react-table";
import Head from "next/head";
import { useEffect, useState } from "react";

export default function Page() {
  return (
    <MainLayout>
      <Head>
        <title>Osoblje</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container flex flex-col  p-4">
        <div className="grid  grid-cols-[3fr_2fr] items-center justify-center">
          <div>
            <h2 className="text-lg font-medium text-gray-800  ">Osoblje</h2>
            <p className="mt-1 text-sm text-gray-500  "></p>
          </div>
        </div>
        <TablePoseteSvi />
      </main>
    </MainLayout>
  );
}

type Osoblje = RouterOutputs["osoblje"]["getCurrentAll"];
const columnsAllHelper = createColumnHelper<Osoblje[0]>();

function ActionButton({ id }: { id: string }) {
  const fun = api.sokSoba.oslobodi.useMutation();
  return (
    <button
      className="rounded-md bg-green-600 px-2 py-1 text-white"
      onClick={(e) => {
        e.stopPropagation();

        fun.mutate(id);
      }}
    >
      Oslobodi
    </button>
  );
}

const columnsAll = [
  columnsAllHelper.accessor("id", {
    header: () => "ID",
    cell: (info) => info.getValue(),
  }),
  columnsAllHelper.accessor("ime", {
    header: () => "Ime",
    cell: (info) => info.getValue(),
  }),
  columnsAllHelper.accessor("prezime", {
    header: () => "Prezime",
    cell: (info) => info.getValue(),
  }),
  columnsAllHelper.accessor("kontakt", {
    header: () => "Kontakt",
    cell: (info) => info.getValue(),
  }),
];

function TablePoseteSvi() {
  const [page, setPage] = useState(0);

  const { isLoading, isError, data, error, refetch } =
    api.osoblje.getCurrentAll.useQuery(page);

  useEffect(() => {
    if (page !== 0) void refetch({ stale: true });
  }, [page, refetch]);

  if (isLoading) {
    return <span>Loading...</span>;
  }

  if (isError) {
    return <span>Error: {error.message}</span>;
  }
  if (!data) return null;

  return (
    <Table
      options={{
        data,
        columns: columnsAll,
        getCoreRowModel: getCoreRowModel(),
      }}
      back={() => {
        setPage((prev) => {
          if (prev !== 0) prev--;

          return prev;
        });
      }}
      forward={() => {
        setPage((prev) => {
          prev++;

          return prev;
        });
      }}
      goTo={() => {
        setPage((prev) => {
          return 0;
        });
      }}
      tableRowClick={(row, router) => {
        void router.push(`/osoblje/${row.id}`);
      }}
    ></Table>
  );
}
