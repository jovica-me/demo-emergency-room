import AddPacijent from "@/components/AddPacijentDialog";
import AddPoseta from "@/components/AddPosetaDialog";
import OdjavaWithContext from "@/components/OdjavaPoseteDialog";
import Table from "@/components/Table";
import MainLayout from "@/layouts/MainLayout";
import { RouterOutputs, api } from "@/utils/api";
import { Combobox, Tab, Transition } from "@headlessui/react";
import { createColumnHelper, getCoreRowModel } from "@tanstack/react-table";

import Head from "next/head";
import { useRouter } from "next/router";
import {
  Fragment,
  createContext,
  useContext,
  useEffect,
  useState,
} from "react";
import { flushSync } from "react-dom";
// @ts-expect-error will
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

interface PoseteContextValye {
  id: string;
  setId: React.Dispatch<React.SetStateAction<string>>;
  resetOdjavaModel: () => void;
  openOdjavaModel: (x: string) => void;
}

export const PosetaContext = createContext<PoseteContextValye>({
  id: "",
  setId: () => {},
  resetOdjavaModel: () => {},
  openOdjavaModel: () => {},
});

export default function Page() {
  const [id, setId] = useState<string>("");
  const [isOdjavaModalOpen, setIsOdjavaModalOpen] = useState(false);

  const resetOdjavaModel = () => {
    flushSync(() => {
      setId("");
      setIsOdjavaModalOpen(false);
    });
  };
  const openOdjavaModel = (x: string) => {
    flushSync(() => {
      setId(x);
    });
    setIsOdjavaModalOpen(true);
  };
  const [ime, setIme] = useState<string>("");
  const pretragaQuery = api.poseta.getPoseteWithName.useQuery(ime);
  const posetePretraga = pretragaQuery.data;

  const [selected, setSelected] = useState(
    posetePretraga?.findLast((val) => val.id === id) ?? null
  );

  const router = useRouter();
  const goToPacijent = (jmbg: bigint) => {
    void router.push(`/pacijent/${jmbg}`);
  };

  useEffect(() => {
    if (selected) {
      setId(selected.id);
      setIme(selected.pacijent.ime);
    }
  }, [selected]);

  return (
    <MainLayout>
      <PosetaContext.Provider
        value={{
          id,
          setId,
          resetOdjavaModel,
          openOdjavaModel,
        }}
      >
        <Head>
          <title>Sve posete</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Tab.Group>
          <main className="container flex flex-col  p-4">
            <div className="grid  gap-4 sm:grid-cols-[1fr_1fr_1fr] sm:items-center sm:justify-center">
              <div>
                <h2 className="text-lg font-medium text-gray-800  ">
                  Sve posete
                </h2>

                <p className="mt-1 text-sm text-gray-500  "></p>
              </div>
              <div>
                <Combobox
                  value={selected}
                  onChange={(e) => {
                    if (e) goToPacijent(e?.pacijentJMBG);
                  }}
                >
                  <div className="relative ">
                    <div className="relative block w-full  ">
                      <Combobox.Input
                        className="w-full   rounded-md border border-gray-200 bg-white px-4 py-2 text-sm leading-5 text-gray-700  focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40"
                        displayValue={(poseta: { ime: string }) => poseta?.ime}
                        onChange={(event) => {
                          setIme(event.target.value);
                        }}
                      />
                      {/* <Combobox.Button className="absolute inset-y-0 right-0 flex items-center pr-2">
            <ChevronUpDownIcon
                                  className="h-5 w-5 text-gray-400"
                                  aria-hidden="true"
                                /> 
          </Combobox.Button> */}
                    </div>
                    <Transition
                      as={Fragment}
                      leave="transition ease-in duration-100"
                      leaveFrom="opacity-100"
                      leaveTo="opacity-0"
                    >
                      <Combobox.Options className="absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                        {posetePretraga && posetePretraga.length === 0 ? (
                          <div className="relative cursor-default select-none px-4 py-2 text-gray-700">
                            Nothing found.
                          </div>
                        ) : (
                          posetePretraga?.map((posetaPoImenu) => (
                            <Combobox.Option
                              key={posetaPoImenu.id}
                              className={({ active }) =>
                                `relative cursor-default select-none py-2 pl-10 pr-4 ${
                                  active
                                    ? "bg-teal-600 text-white"
                                    : "text-gray-900"
                                }`
                              }
                              value={posetaPoImenu}
                            >
                              {({ selected, active }) => (
                                <>
                                  <span
                                    className={`block truncate ${
                                      selected ? "font-medium" : "font-normal"
                                    }`}
                                  >
                                    {posetaPoImenu.pacijent.ime} -{" "}
                                    {posetaPoImenu.pacijent.prezime}
                                  </span>
                                  <span> {posetaPoImenu.id}</span>
                                </>
                              )}
                            </Combobox.Option>
                          ))
                        )}
                      </Combobox.Options>
                    </Transition>
                  </div>
                </Combobox>
              </div>
              <div className="flex w-full max-w-md flex-col px-2 sm:px-0">
                <Tab.List className="flex  space-x-1 rounded-xl bg-blue-900/20 p-1">
                  {["Trenutni", "Svi"].map((x) => (
                    <Tab
                      key={x}
                      className={({ selected }) =>
                        classNames(
                          "w-full rounded-lg py-2.5 text-sm font-medium leading-5 text-blue-600",
                          "ring-white ring-opacity-60 ring-offset-2 ring-offset-blue-400 focus:outline-none focus:ring-2",
                          selected
                            ? "bg-white shadow"
                            : "text-blue-900 hover:bg-white/[0.12] hover:text-white"
                        )
                      }
                    >
                      {x}
                    </Tab>
                  ))}
                </Tab.List>
              </div>
            </div>
            <Tab.Panels>
              {["Trenutni", "Svi"].map((x) => (
                <Tab.Panel key={x}>
                  {x === "Trenutni" ? <TablePosete /> : <TablePoseteSvi />}
                </Tab.Panel>
              ))}
            </Tab.Panels>
          </main>
        </Tab.Group>
        {isOdjavaModalOpen && <OdjavaWithContext />}
      </PosetaContext.Provider>
    </MainLayout>
  );
}

type Posete = RouterOutputs["poseta"]["getCurrentAll"];

const columnNowHelper = createColumnHelper<Posete[0]>();

function ActionButton({ id }: { id: string }) {
  const { openOdjavaModel } = useContext(PosetaContext);
  return (
    <button
      onClick={(e) => {
        e.stopPropagation();
        openOdjavaModel(id);
      }}
      className="flex items-end rounded-lg bg-blue-600 px-4 py-2 text-white"
    >
      Odjavi
    </button>
  );
}

const columnsNow = [
  columnNowHelper.accessor("pacijentJMBG", {
    header: () => "JMBG",
  }),
  columnNowHelper.accessor(
    (row) => `${row.pacijent.ime} ${row.pacijent.prezime}`,
    {
      header: "Full Name",
      cell: (info) => info.getValue(),
    }
  ),
  columnNowHelper.accessor("dolazak", {
    header: "Vreme dolaska",
    cell: (info) => info.getValue().toLocaleString(),
  }),
  columnNowHelper.display({
    id: "Akcije",
    cell: (row) => <ActionButton id={row.row.original.id} />,
  }),
];

function TablePosete() {
  const [page, setPage] = useState(0);

  const { isLoading, isError, data, error, refetch } =
    api.poseta.getCurrentAll.useQuery(page);

  useEffect(() => {
    if (page !== 0) void refetch({ stale: true });
  }, [page, refetch]);

  if (isLoading) {
    return <span>Loading...</span>;
  }

  if (isError) {
    return <span>Error: {error.message}</span>;
  }
  if (!data) return null;

  return (
    <Table
      options={{
        data,
        columns: columnsNow,
        getCoreRowModel: getCoreRowModel(),
      }}
      back={() => {
        setPage((prev) => {
          if (prev !== 0) prev--;

          return prev;
        });
      }}
      forward={() => {
        setPage((prev) => {
          prev++;

          return prev;
        });
      }}
      goTo={() => {
        setPage((prev) => {
          return 0;
        });
      }}
      tableRowClick={(row, router) => {
        void router.push(`/pacijent/${row.pacijentJMBG}`);
      }}
    ></Table>
  );
}

const columnsAllHelper = createColumnHelper<Posete[0]>();

const columnsAll = [
  columnsAllHelper.accessor("pacijentJMBG", {
    header: () => "JMBG",
  }),
  columnsAllHelper.accessor(
    (row) => `${row.pacijent.ime} ${row.pacijent.prezime}`,
    {
      header: "Full Name",
      cell: (info) => info.getValue(),
    }
  ),
  columnsAllHelper.accessor("dolazak", {
    header: "Vreme dolaska",
    cell: (info) => info.getValue().toLocaleString(),
  }),
  columnsAllHelper.accessor("odlazak", {
    header: "Vreme odlaska",
    cell: (info) => info.getValue()?.toLocaleString(),
  }),
  columnsAllHelper.accessor("gotova", {
    header: "Gotova",
    cell: (info) =>
      info.getValue() ? (
        "Da"
      ) : (
        <span className="flex items-center justify-center gap-2">
          Ne <ActionButton id={info.row.original.id}></ActionButton>
        </span>
      ),
  }),
];

function TablePoseteSvi() {
  const [page, setPage] = useState(0);

  const { isLoading, isError, data, error, refetch } =
    api.poseta.getHistoryAll.useQuery(page);

  useEffect(() => {
    if (page !== 0) void refetch({ stale: true });
  }, [page, refetch]);

  if (isLoading) {
    return <span>Loading...</span>;
  }

  if (isError) {
    return <span>Error: {error.message}</span>;
  }
  if (!data) return null;

  return (
    <Table
      options={{
        data,
        columns: columnsAll,
        getCoreRowModel: getCoreRowModel(),
      }}
      back={() => {
        setPage((prev) => {
          if (prev !== 0) prev--;

          return prev;
        });
      }}
      forward={() => {
        setPage((prev) => {
          prev++;

          return prev;
        });
      }}
      goTo={() => {
        setPage((prev) => {
          return 0;
        });
      }}
      tableRowClick={(row, router) => {
        void router.push(`/pacijent/${row.pacijentJMBG}`);
      }}
    ></Table>
  );
}
