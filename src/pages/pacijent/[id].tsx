import AddPregledi from "@/components/AddPreglediDialog";
import { ProstaOdjava } from "@/components/OdjavaPoseteDialog";
import Table from "@/components/Table";
import MainLayout from "@/layouts/MainLayout";
import { RouterOutputs, api } from "@/utils/api";
import { createColumnHelper, getCoreRowModel } from "@tanstack/react-table";
import Head from "next/head";
import { useRouter } from "next/router";
import { createContext, use, useContext, useEffect, useState } from "react";
import { flushSync } from "react-dom";

type PacijentIPosete = RouterOutputs["pacijent"]["getOneWithIdAndPosete"];

interface PacijentIPoseteValue {
  idPosete: string | null;
  idPregleda: string;
  setIdPosete: (x: string) => void;
  setIdPregleda: (x: string) => void;
}

export const PacijentContext = createContext<PacijentIPoseteValue>({
  idPosete: "",
  idPregleda: "",
  setIdPosete: () => {},
  setIdPregleda: () => {},
});
export default function Page({}) {
  const router = useRouter();
  const id = router.query.id as string;
  return (
    <MainLayout>
      <Head>
        <title>Poseta - </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container flex flex-col  p-4">
        {/* <div className="grid  grid-cols-[3fr_2fr] items-center justify-center">
          <div>
            <h2 className="text-lg font-medium text-gray-800  ">Pacijenti</h2>

            <p className="mt-1 text-sm text-gray-500  "></p>
          </div>
        </div> */}

        {id && <Layout id={id}></Layout>}
      </main>
    </MainLayout>
  );
}

function Layout({ id }: { id: string }) {
  const pacijentQuery = api.pacijent.getOneWithIdAndPosete.useQuery(BigInt(id));
  const end = api.poseta.end.useMutation();
  const endWithSok = api.poseta.endWithSok.useMutation();
  const rezSokSobu = api.sokSoba.brzoRezervisi.useMutation();
  const osl = api.sokSoba.oslobodi.useMutation();
  const [idPosete, setIdPosete] = useState<string | null>(null);
  const [idPregleda, setIdPregleda] = useState("");

  const [isOdjavaModalOpen, setIsOdjavaModalOpen] = useState(false);
  const [isAddPregledModalOpen, setIsAddPregledModalOpen] = useState(false);

  const refetch = () => {
    void pacijentQuery.refetch();
  };

  useEffect(() => {
    if (pacijentQuery.data) {
      const aktivnaPoseta = pacijentQuery.data.posete.find(
        (poseta) => !poseta.gotova
      );
      if (aktivnaPoseta) {
        setIdPosete(aktivnaPoseta.id.toString());
      }
    }
  }, [pacijentQuery.data]);

  if (!pacijentQuery.data) return <div>Loading...</div>;

  const { ime, prezime, jmbg, posete, danKreacije, datumRodj, lbo } =
    pacijentQuery.data;

  const aktivnaPoseta = posete.find((poseta) => !poseta.gotova);
  const listaBezAktive = posete.filter((poseta) => poseta.gotova);

  return (
    <PacijentContext.Provider
      value={{ idPregleda, setIdPregleda, idPosete, setIdPosete }}
    >
      <div className="grid gap-4 sm:grid-cols-2">
        <Head>
          <title>
            Poseta - {ime} {prezime}{" "}
          </title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="flex flex-col gap-4 rounded-xl bg-white p-4">
          <h2 className="text-lg font-medium text-gray-800  ">Pacijent</h2>
          <span className=""> Ime: {ime}</span>
          <span className=""> Prezime: {prezime}</span>
          <span className=""> JMBG: {jmbg.toString()}</span>
          <span className=""> LBO: {lbo}</span>
        </div>

        {aktivnaPoseta && (
          <>
            <div className="flex flex-col gap-4 rounded-xl bg-white p-4">
              <h2 className="text-lg font-medium text-gray-800  ">
                Aktivna poseta: {aktivnaPoseta.id}
              </h2>
              {aktivnaPoseta.prioritet > 0 && (
                <div className="flex flex-col rounded-xl bg-orange-100 p-4">
                  <h2 className="text-lg font-medium text-orange-900  ">
                    Prioritet: {aktivnaPoseta.prioritet}
                  </h2>
                </div>
              )}
              {aktivnaPoseta.sokSoba && (
                <div className="flex flex-col rounded-xl bg-red-100 p-4">
                  <h2 className="text-lg font-medium text-red-950  ">
                    Nalazi se u SokSobi: {aktivnaPoseta.sokSoba.id}
                  </h2>
                </div>
              )}

              <span className="">
                Datum: {aktivnaPoseta.dolazak.toDateString()}
              </span>
              <span className=""> Simptomi: {aktivnaPoseta.simptomi}</span>
              <div className="flex  gap-4">
                <button
                  onClick={() => {
                    setIsOdjavaModalOpen(true);
                  }}
                  className="flex transform items-center rounded-lg bg-blue-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
                >
                  Odjavi
                </button>
                {isOdjavaModalOpen && (
                  <ProstaOdjava
                    onSubmit={() => {
                      flushSync(() => {
                        setIsOdjavaModalOpen(false);
                        if (aktivnaPoseta.sokSoba) {
                          void endWithSok.mutate(aktivnaPoseta.id);
                        } else {
                          void end.mutate(aktivnaPoseta.id);
                        }
                        void pacijentQuery.refetch({
                          stale: true,
                          exact: true,
                        });
                      });
                    }}
                    closeModal={() => {
                      setIsOdjavaModalOpen(false);
                    }}
                    selected={{
                      ...aktivnaPoseta,
                      pacijent: {
                        ime,
                        prezime,
                        jmbg,
                        datumRodj,
                        lbo,
                        danKreacije,
                      },
                    }}
                  >
                    <div>
                      <span className="text-gray-700 ">Pacijent JMBG:</span>
                      <span>{jmbg.toString()}</span>
                    </div>
                  </ProstaOdjava>
                )}
                <button
                  onClick={() => {
                    flushSync(() => {
                      setIdPosete(aktivnaPoseta.id);
                      setIsAddPregledModalOpen(true);
                    });
                  }}
                  className="flex transform items-center rounded-lg bg-blue-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
                >
                  Dodaj pregled
                </button>
                {isAddPregledModalOpen && (
                  <AddPregledi
                    close={() => {
                      setIsAddPregledModalOpen(false);
                      refetch();
                    }}
                  ></AddPregledi>
                )}
                {!aktivnaPoseta.sokSoba && (
                  <button
                    onClick={() => {
                      void rezSokSobu.mutateAsync(aktivnaPoseta.id);
                      refetch();
                    }}
                    className="flex transform items-center rounded-lg bg-red-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-red-500 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80"
                  >
                    Rezerviši Šok sobu
                  </button>
                )}
                {aktivnaPoseta.sokSoba && (
                  <button
                    onClick={() => {
                      void osl.mutateAsync(aktivnaPoseta.id);
                      refetch();
                    }}
                    className="flex transform items-center rounded-lg bg-red-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-red-500 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80"
                  >
                    Odjavi Šok sobu
                  </button>
                )}
              </div>
            </div>
          </>
        )}
        {idPosete && <IzvestajTable id={idPosete} />}

        {listaBezAktive.length !== 0 && (
          <div className="col-start-2 flex flex-col rounded-xl bg-white p-4">
            <h2 className="text-lg font-medium text-gray-800  ">
              Prethodne posete
            </h2>
            <PoseteTable posete={listaBezAktive}></PoseteTable>
          </div>
        )}
      </div>
    </PacijentContext.Provider>
  );
}

function SelectPosetaButton({ id }: { id: string }) {
  const { setIdPosete } = useContext(PacijentContext);
  return (
    <button
      onClick={(e) => {
        e.stopPropagation();
        setIdPosete(id);
      }}
      className="flex transform items-center rounded-lg bg-blue-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
    >
      Saznaj vise
    </button>
  );
}

type T = Exclude<PacijentIPosete, null>["posete"][0];
const columnHelper = createColumnHelper<T>();

const columnsAll = [
  columnHelper.accessor("odlazak", {
    header: () => "Datum odlaska",
    cell: (row) => row.getValue()?.toLocaleDateString(),
  }),
  columnHelper.accessor("simptomi", {
    header: () => "Simptomi",
  }),
  columnHelper.display({
    id: "akcije",
    cell: (row) => (
      <SelectPosetaButton id={row.row.original.id}></SelectPosetaButton>
    ),
  }),
];

function PoseteTable({
  posete,
}: {
  posete: Exclude<PacijentIPosete, null>["posete"];
}) {
  return (
    <Table
      options={{
        data: posete,
        columns: columnsAll,
        getCoreRowModel: getCoreRowModel(),
      }}
    ></Table>
  );
}

type PregledWithIzvestajAndDatoteka =
  RouterOutputs["pregled"]["getOneWithIzvestajAndDatoteka"];
type MM = Exclude<PregledWithIzvestajAndDatoteka, null>[0];

const colIzvestaj = createColumnHelper<MM>();

function NapisiIzvestajForma({ id }: { id: string }) {
  const router = useRouter();
  return (
    <button
      onClick={(e) => {
        e.stopPropagation();
        void router.push(`/izvestaj/novi/${id}`);
      }}
      className="flex transform items-center rounded-lg bg-blue-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
    >
      Napiši izveštaj
    </button>
  );
}

const colIzvestajAll = [
  colIzvestaj.accessor("ordinacijaId", {
    header: () => "Ordinacuja",
    cell: (row) => row.getValue(),
  }),
  colIzvestaj.display({
    id: "akcije",
    cell: (row) => {
      if (row.row.original.gotov) return <span>Gotov</span>;
      return (
        <NapisiIzvestajForma id={row.row.original.id}></NapisiIzvestajForma>
      );
    },
  }),
];

function IzvestajTable({ id }: { id: string }) {
  const query = api.pregled.getOneWithIzvestajAndDatoteka.useQuery(id, {
    refetchInterval: 1000,
  });
  const { data } = query;
  const router = useRouter();

  if (!data) return <div>loading</div>;

  return (
    <div className="flex flex-col  rounded-xl bg-white p-4">
      <h2 className="text-lg font-medium text-gray-800  ">
        Svi pregledi za posetu: {id}
      </h2>
      <Table
        options={{
          data: data,
          columns: colIzvestajAll,
          getCoreRowModel: getCoreRowModel(),
        }}
        tableRowClick={(row) => {
          if (!row.izvestaj) {
            void router.push(`/izvestaj/novi/${row.id}`);
          } else {
            void router.push(`/izvestaj/${row.izvestaj.id}`);
          }
        }}
      ></Table>
    </div>
  );
}
