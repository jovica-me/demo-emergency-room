import AddPacijent from "@/components/AddPacijentDialog";
import AddPoseta from "@/components/AddPosetaDialog";
import Table from "@/components/Table";
import MainLayout from "@/layouts/MainLayout";
import { RouterOutputs, api } from "@/utils/api";
import { createColumnHelper, getCoreRowModel } from "@tanstack/react-table";

import Head from "next/head";
import { useRouter } from "next/router";
import {
  createContext,
  useContext,
  useEffect,
  useLayoutEffect,
  useRef,
  useState,
} from "react";
import { flushSync } from "react-dom";

export function makelen13(jmbg: bigint) {
  const jmbgString = jmbg > 100 ? jmbg.toString() : "11111111";
  const jmbgLength = jmbgString.length;

  if (jmbgLength > 13) {
    return BigInt(jmbgString.slice(0, 12));
  } else if (jmbgLength < 13) {
    return BigInt(jmbgString.padEnd(12, "0"));
  } else {
    return jmbg;
  }
}

interface JMBGContextValue {
  jmbg: bigint;
  setJmbg: React.Dispatch<React.SetStateAction<bigint>>;
  resetPosetaModel: () => void;
  openPosetaModel: (x: bigint) => void;
}

export const JMBGContext = createContext<JMBGContextValue>({
  jmbg: 21n,
  setJmbg: () => {},
  resetPosetaModel: () => {},
  openPosetaModel: () => {},
});

export default function Page({}) {
  const [isPacijentAddModalOpen, setIsPacijentAddModalOpen] = useState(false);
  const [isPosetaAddModalOpen, setIsPosetaAddModalOpen] = useState(false);
  const [isHitnaPosetaAddModalOpen, setIsHitnaPosetaAddModalOpen] =
    useState(false);

  const [jmbg, setJmbg] = useState<bigint>(1n);

  const resetPosetaModel = () => {
    setJmbg(1n);
    setIsPosetaAddModalOpen(false);
  };
  const openPosetaModel = (x: bigint) => {
    flushSync(() => {
      setJmbg(x);
      setIsPosetaAddModalOpen(true);
    });
  };

  return (
    <MainLayout>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <JMBGContext.Provider
        value={{
          jmbg,
          setJmbg,
          resetPosetaModel,
          openPosetaModel,
        }}
      >
        <main className="container flex flex-col  p-4">
          <div className="grid  grid-cols-[3fr_2fr] items-center justify-center">
            <div>
              <h2 className="text-lg font-medium text-gray-800  ">Pacijenti</h2>

              <p className="mt-1 text-sm text-gray-500  "></p>
            </div>
            <div className="flex gap-4">
              <button
                onClick={() => {
                  setIsPacijentAddModalOpen(true);
                }}
                className=" flex transform items-center rounded-lg bg-transparent px-4 py-2 font-medium capitalize tracking-wide text-gray-800 transition-colors duration-300 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
              >
                <svg
                  className="h-6 w-6"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="1.5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.374 21c-2.331 0-4.512-.645-6.374-1.766z"
                  ></path>
                </svg>

                <span className="mx-1">Novi Pacijent</span>
              </button>
              <button
                onClick={() => {
                  setIsPosetaAddModalOpen(true);
                }}
                className="flex transform items-center rounded-lg bg-blue-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
              >
                <svg
                  className="h-6 w-6"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="1.5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M12 4.5v15m7.5-7.5h-15"
                  ></path>
                </svg>

                <span className="mx-1">Nova Poseta</span>
              </button>
              <button className="flex transform items-center rounded-lg bg-red-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-red-500 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80">
                <svg
                  className="h-6 w-6"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="1.5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"
                  ></path>
                </svg>

                <span className="mx-1">Htni slučaj</span>
              </button>
            </div>
          </div>
          <AddPacijent
            isOpen={isPacijentAddModalOpen}
            setIsOpen={setIsPacijentAddModalOpen}
          />
          {isPosetaAddModalOpen && <AddPoseta />}

          <TablePacijenti />
        </main>
      </JMBGContext.Provider>
    </MainLayout>
  );
}
type Pacijenti = RouterOutputs["pacijent"]["getAll"];

const columnHelper = createColumnHelper<Pacijenti[0]>();

function ActionButton({ jmbg }: { jmbg: bigint }) {
  const { setJmbg, openPosetaModel } = useContext(JMBGContext);
  return (
    <button
      onClick={(e) => {
        e.stopPropagation();
        openPosetaModel(jmbg);
      }}
      className="flex transform items-center rounded-lg bg-blue-600 px-4 py-2 font-medium capitalize tracking-wide text-white transition-colors duration-300 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80"
    >
      Započni posetu
    </button>
  );
}

const columns = [
  columnHelper.accessor("jmbg", {
    header: () => "JMBG",
  }),
  columnHelper.accessor((row) => `${row.ime} ${row.prezime}`, {
    header: "Full Name",
    cell: (info) => info.getValue(),
  }),
  columnHelper.accessor("datumRodj", {
    header: "Datum rodjenja",
    cell: (info) => info.getValue().toLocaleDateString(),
  }),
  columnHelper.display({
    id: "Akcije",
    cell: (row) => <ActionButton jmbg={row.row.original.jmbg} />,
  }),
];

function TablePacijenti() {
  const [page, setPage] = useState(0);

  const { isLoading, isError, data, error, refetch } =
    api.pacijent.getAll.useQuery(page);

  useEffect(() => {
    if (page !== 0) void refetch({ stale: true });
  }, [page, refetch]);
  const router = useRouter();

  if (isLoading) {
    return <span>Loading...</span>;
  }

  if (isError) {
    return <span>Error: {error.message}</span>;
  }
  if (!data) return null;

  return (
    <Table
      options={{
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
      }}
      back={() => {
        setPage((prev) => {
          if (prev !== 0) prev--;

          return prev;
        });
      }}
      forward={() => {
        setPage((prev) => {
          prev++;

          return prev;
        });
      }}
      goTo={() => {
        setPage((prev) => {
          return 0;
        });
      }}
      tableRowClick={(row) => {
        void router.push(`/pacijent/${row.jmbg}`);
      }}
    ></Table>
  );
}
